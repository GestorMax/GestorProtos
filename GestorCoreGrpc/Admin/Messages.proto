	syntax = "proto3";

import "google/protobuf/Timestamp.proto";
import "ProtoMessages/Common.proto";
import "GestorCoreGrpc/Shared/Messages.proto";
import "ServicePermissions/Messages.proto";

package gestorCoreGrpcAdmin;

//LISTS ---------------------------------------------------------------
message DatabaseMessageList {
	repeated DatabaseMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message UnlinkedDatabaseMessageList {
	repeated UnlinkedDatabaseMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message DatabaseResultMessageList {
	repeated DatabaseResultMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message DatabaseInstanceMessageList {
	repeated DatabaseInstanceMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message CustomerMessageList {
	repeated CustomerMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message PackBundleMessageList {
	repeated PackBundleMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message ApiKeyMessageList {
	repeated ApiKeyMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message ApiKeyLicenseMessageList {
	repeated ApiKeyLicenseMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message DatabaseLicenseMessageList {
	repeated DatabaseLicenseMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message DatabaseCustomerMessageList {
	repeated DatabaseCustomerMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message LicenseTypeMessageList {
	repeated LicenseTypeMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message ServerMessageList{
	repeated ServerMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message CloudDatabaseMessageList{
	protoMessages.ResponseResult result = 1;
	repeated CloudDatabaseMessage values = 2;
}

message RdpUserMessageList{
	repeated RdpUserMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message VirtualServerMessageList{
	repeated VirtualServerMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

message VirtualServerDatabaseMessageList{
	repeated VirtualServerDatabaseMessage values = 1;
	protoMessages.ResponseResult result = 2;
}

//MESSAGES ---------------------------------------------------------------
message ConfirmLinkUserMessage {
	string link = 1;
	string gestorIdUser = 2;
}

message LinkLicenseToDatabaseRequest {
	int32 licenseId = 1;
	int32 databaseId = 2;
}

message LicenseRequest {
	int32 licenseId = 1;
}

message UnlinkedDatabaseMessage {
	int32 databaseId = 1;
	string databaseName = 2;
	repeated string companies = 3;
	string displayName = 4;
	gestorCoreGrpcShared.GestorMaxVersionTypes version = 5;
}

message DatabaseResultMessage {
	int32 databaseId = 1;
	int32 licenseCount = 2;
	int32 instanceCount = 3;
	string customerTaxId = 4;
	string customerCompanyName = 5;
	int32 customerId = 6;
	string databaseName = 7;
	repeated string companies = 8;
	repeated string instanceServers = 9;
	bool hasMainInstance = 10;
	DatabaseInstanceMessageDatabaseMessage mainInstance = 11;
	string redactedId = 12;
	int32 activeInstancesLast30Days = 13;
	int32 activeInstancesLast45Days = 14;
}

message CreateCustomerResponse {
	protoMessages.ResponseResult result = 1;
	int32 customerId = 2;
}

message CreateDatabaseResquest {
	string name = 2;
	gestorCoreGrpcShared.GestorMaxVersionTypes version = 3;
}

message GetGestorDbTokenRequest {
	int32 databaseId = 1;
}

message EditDatabaseNameRequest {
	int32 databaseId = 1;
	string newName = 2;
}

message GestorDbTokenResponse {
	string Token = 1;
}

message CreatePackBundleResponse {
	protoMessages.ResponseResult result = 1;
	int32 packBundleId = 2;
}

message UserRoleRequest {
	string userId = 1;
	int32 roleId = 2;
}

message AllowedResponse {
	bool isAllowed = 1;
}

message CustomerMessage {
	int32 id = 1;
	string companyName = 2;
	protoMessages.DateOnlyMessage creationDate = 27;
	string taxId = 3;
	repeated string phones = 4;
	repeated string emails = 5;
	string notes = 6;
	repeated AddressMessage addresses = 7;
	repeated PackBundleMessage packBundles = 8;
	protoMessages.Int32Message vaultId = 9;
	protoMessages.StringMessage budgetLink = 10;
	protoMessages.StringMessage binnacleLink = 11;
	protoMessages.StringMessage archiveLink = 12;

	BudgetTypes budget = 18;
	BinnacleTypes binnacle = 19;
	BillTypes bill = 22;
	protoMessages.DateOnlyMessage billDate  = 23;
	PageTypes page = 24;
	BillingTicketTypes billingTicket = 25;
	StartTicketTypes startTicket = 26;

	enum BudgetTypes {
		BudgetTypes_Pending = 0;
		BudgetTypes_ReadyToSend = 1;
		BudgetTypes_Sent = 2;
		BudgetTypes_Approved = 3;
	}
	enum BinnacleTypes {
		BinnacleTypes_Pending = 0;
		BinnacleTypes_Ready = 1;
	}
	enum BillTypes {
		BillTypes_Pending = 0;
		BillTypes_Check = 1;
		BillTypes_Checked = 2;
		BillTypes_Free = 3;
	}
	enum PageTypes {
		PageTypes_Pending = 0;
		PageTypes_Updated = 1;
	}
	enum BillingTicketTypes {
		BillingTicketTypes_Pending = 0;
		BillingTicketTypes_Send = 1;
		BillingTicketTypes_Sent = 2;
	}
	enum StartTicketTypes {
		StartTicketTypes_Pending = 0;
		StartTicketTypes_Send = 1;
		StartTicketTypes_Sent = 2;
	}
}

message CustomerResponse{
	protoMessages.ResponseResult result = 1;
	CustomerMessage message = 2;
}


message CustomerOtherDatasRequest{
	int32 id = 1;
	protoMessages.StringMessage customerNotes = 2;
	protoMessages.StringMessage customerContacts = 3;
	protoMessages.StringMessage customerCompanies = 4;
}

message VaultMessage {
	int32 id = 1;
	protoMessages.StringMessage hereIsDataApiKey = 2;
}

message VaultResponse {
	protoMessages.ResponseResult result = 1;
	VaultMessage message = 2;
}

message UserMessage {
	string id = 1;
	string name = 2;
	string email = 3;
	repeated servicePermissions.RolePermissionMessage roles = 4;
}

message UserMessageList {
	protoMessages.ResponseResult result = 2;
	repeated UserMessage values = 1;
}

message UserResponse {
	protoMessages.ResponseResult result = 1;
	UserMessage message = 2;
}

message ListFeatureByAccessRequest { 
	int32 access = 1;
	int32 resource = 2;
}

message CreateLicensePackRequest {
	int32 id = 1;
	int32 moduleId = 2;
	int32 maxCount = 3;
	bool isDeleted = 4;
	int32 packBundleId = 5;
}

message CreateLicensePackResponse {
	protoMessages.ResponseResult result = 1;
	int32 licensePackId = 2;
}

message AddressMessage {
	int32 id = 1;
	string phone = 2;
	string addressLine1 = 3;
	string addressLine2 = 4;
	string city = 5;
	ProvinceMessage province  = 6;
	string zip = 7;
}

message ProvinceMessage {
	int32 id = 1;
	string name = 2;
}

message PackBundleMessage {
	int32 id = 1;
	repeated LicensePackMessagePackBundleMessage licensePacks = 2;
	float value = 4;
	bool isDeleted = 5;

	//CustomerMessage customer = 3;
	int32 customerId = 6;
}

message LicensePackMessage {
	int32 id = 1;
	int32 moduleId = 2;
	int32 maxCount = 3;
	repeated LicenseMessage licenses = 4;
	bool isDeleted = 5;
	PackBundleMessage packBundle = 6;
}

message LicensePackMessagePackBundleMessage {
	int32 id = 1;
	int32 moduleId = 2;
	int32 maxCount = 3;
	repeated LicenseMessageLicensePackMessage licenses = 4;
	bool isDeleted = 5;
	//PackBundleMessage packBundle = 6;
}

message LicenseTypeMessage {
	int32 id = 1;
	string name = 2;
	int32 moduleId = 3;

	repeated LicenseTypeRoleMessage roles = 4;

	protoMessages.Int32Message maxCompanies = 5;
	gestorCoreGrpcShared.LicenseTypes gestorLicenseType = 6;

	protoMessages.Int32Message customDataAmount = 10;
	repeated servicePermissions.ResourceMessage resources = 11;
}

message LicenseTypeResponse {
	protoMessages.ResponseResult result = 1;
	LicenseTypeMessage message = 2;
}

message LicenseTypeRoleMessage {
	int32 licenseTypeId = 1;
	int32 roleId = 2;
	servicePermissions.RoleMessage role = 3;
}

message LicenseMessage {
	int32 id = 1;
	int32 licensePackId = 2;
	LicensePackMessage licensePack = 3;
	int32 licenseTypeId = 4;
	LicenseTypeMessage licenseType = 5;
	google.protobuf.Timestamp validFrom = 6;
	google.protobuf.Timestamp validTo = 7;
	string cancelationNote = 8;

	oneof module {
		GestorMaxLicenseMessage gestorMax = 10;
		AnalyticsLicenseMessage analytics = 11;
	}
}

message GestorMaxLicenseMessage {
	int32 databaseId = 1;
	DatabaseMessage database = 2;
	int32 maxCompanies = 4;
	string maxVersion = 5;
}

message AnalyticsLicenseMessage {
	repeated servicePermissions.ResourceMessage customDatas = 1;
}


message LicenseMessageLicensePackMessage {
	int32 id = 1;
	int32 maxCompanies = 2;
	google.protobuf.Timestamp validFrom = 4;
	google.protobuf.Timestamp validTo = 5;
	DatabaseMessage database = 6;
	//LicensePackMessage licensePack = 7;
	LicenseTypeMessage licenseType = 8;
	string maxVersion = 9;
	string cancelationNote = 10;
	
	oneof module {
		GestorMaxLicenseMessage gestorMax = 11;
		AnalyticsLicenseMessage analytics = 12;
	}
}

message LicenseMessageDatabaseMessage {
	int32 id = 1;
	int32 maxCompanies = 2;
	google.protobuf.Timestamp validFrom = 4;
	google.protobuf.Timestamp validTo = 5;
	//DatabaseMessage database = 6;
	LicensePackMessageLicenseMessage licensePack = 7;
	LicenseTypeMessage licenseType = 8;
	string maxVersion = 9;
	string cancelationNote = 10;
}

message DatabaseInstanceMessage {
	int32 id = 1;
	string serverName = 2;
	string serverInstance = 3;
	string serverDBName = 4;
	google.protobuf.Timestamp creationDate = 5;
	google.protobuf.Timestamp lastConnection = 9;
	google.protobuf.Timestamp lastBackup = 6;
	repeated gestorCoreGrpcShared.CompanyMessage companies = 7;
	repeated TerminalMessage terminals = 8;
	DatabaseMessageDatabaseInstanceMessage database = 10;
}

message DatabaseMessageDatabaseInstanceMessage {
	int32 id = 1;
	repeated LicenseMessageDatabaseMessage licenses = 2;
	google.protobuf.Timestamp creation = 3;
	google.protobuf.Timestamp lastConnection = 4;
	string name = 5;
	//repeated DatabaseInstanceMessageDatabaseMessage instances = 6;
}

message DatabaseMessageLicenseMessage {
	int32 id = 1;
	//repeated LicenseMessage licenses = 2;
	google.protobuf.Timestamp creation = 3;
	google.protobuf.Timestamp lastConnection = 4;
	string name = 5;
	repeated DatabaseInstanceMessageDatabaseMessage instances = 6;
}

message DatabaseMessage {
	int32 id = 1;
	repeated LicenseMessageDatabaseMessage licenses = 2;
	google.protobuf.Timestamp creation = 3;
	google.protobuf.Timestamp lastConnection = 4;
	string name = 5;
	repeated DatabaseInstanceMessageDatabaseMessage instances = 6;
	DatabaseInstanceMessageDatabaseMessage mainInstance = 7;
	string redactedId = 8;
	protoMessages.Int32Message vaultId = 9;
	gestorCoreGrpcShared.GestorMaxVersionTypes Version = 10;

	UserMessage commercial = 11;
	UserMessage executive = 12;
	DataTypes data = 13;
	DatabaseTypes databaseConfiguration = 14;
	AccessTypes access = 15;
	protoMessages.DateOnlyMessage accessDate = 16;
	HomeMailTypes homeMail = 17;
	DriveTypes drive = 18;
	ModalityTypes modality = 19;
	PaymentOptionTypes paymentOption = 20;
	BonusCloudMonthTypes bonusCloudMonth = 21;
	CloudPlanTypes cloudPlan = 22;
	PlanTypes plan = 23;

	enum PlanTypes {
		PlanTypes_Pending = 0;
		PlanTypes_Programmed = 1;
	}
	
	enum DataTypes {
		DataTypes_Pending = 0;
		DataTypes_Partial = 1;
		DataTypes_Complete = 2;
	}
	
	enum DatabaseTypes {
		DatabaseTypes_Pending = 0;
		DatabaseTypes_InProgress = 1;
		DatabaseTypes_Configured = 2;
	}
	
	enum AccessTypes {
		AccessTypes_Pending = 0;
		AccessTypes_Send = 1;
		AccessTypes_Sent = 2;
	}
	
	enum HomeMailTypes {
		HomeMailTypes_Pending = 0;
		HomeMailTypes_Send = 1;
		HomeMailTypes_Sent = 2;
	}
	
	enum DriveTypes {
		DriveTypes_Pending = 0;
		DriveTypes_Shared = 1;
	}
	
	enum ModalityTypes {
		ModalityTypes_Pending = 0;
		ModalityTypes_Buys = 1;
		ModalityTypes_Rent = 2;
	}
	
	enum PaymentOptionTypes {
		PaymentOptionTypes_Pending = 0;
		PaymentOptionTypes_CashPayment = 1;
		PaymentOptionTypes_FourInstallments = 2;
	}
	
	enum BonusCloudMonthTypes {
		BonusCloudMonthTypes_NoBonus = 0;
		BonusCloudMonthTypes_JanFeb = 1;
		BonusCloudMonthTypes_FebMar = 2;
		BonusCloudMonthTypes_MarApr = 3;
		BonusCloudMonthTypes_AprMay = 4;
		BonusCloudMonthTypes_MayJun = 5;
		BonusCloudMonthTypes_JunJul = 6;
		BonusCloudMonthTypes_JulAug = 7;
		BonusCloudMonthTypes_AugSep = 8;
		BonusCloudMonthTypes_SepOct = 9;
		BonusCloudMonthTypes_OctNov = 10;
		BonusCloudMonthTypes_NovDec = 11;
		BonusCloudMonthTypes_DecJan = 12;
	}
	
	enum BillCloudMonthTypes {
		BillCloudMonthTypes_January = 0;
		BillCloudMonthTypes_February = 1;
		BillCloudMonthTypes_March = 2;
		BillCloudMonthTypes_April = 3;
		BillCloudMonthTypes_May = 4;
		BillCloudMonthTypes_June = 5;
		BillCloudMonthTypes_July = 6;
		BillCloudMonthTypes_August = 7;
		BillCloudMonthTypes_September = 8;
		BillCloudMonthTypes_October = 9;
		BillCloudMonthTypes_November = 10;
		BillCloudMonthTypes_December = 11;
	}
	
	enum CloudPlanTypes {
		CloudPlanTypes_Pending = 0;
		CloudPlanTypes_Programmed = 1;
		CloudPlanTypes_NoCloud = 2;
	}

}

message DatabaseInstanceMessageDatabaseMessage {
	int32 id = 1;
	string serverName = 2;
	string serverInstance = 3;
	string serverDBName = 4;
	google.protobuf.Timestamp creationDate = 5;
	google.protobuf.Timestamp lastBackup = 6;
	repeated gestorCoreGrpcShared.CompanyMessage companies = 7;
	repeated TerminalMessage terminals = 8;
	google.protobuf.Timestamp lastConnection = 9;
	//DatabaseMessage database = 10;
	string name = 12;
	protoMessages.StringMessage DBVersion = 13;
	protoMessages.Int32Message DBSizeInMb = 14;
}

message LicensePackMessageLicenseMessage {
	int32 id = 1;
	int32 moduleId = 2;
	int32 maxCount = 3;
	//repeated LicenseMessage licenses = 4;
	bool isDeleted = 5;
	PackBundleMessageLicensePackMessage packBundle = 6;
}

message PackBundleMessageLicensePackMessage {
	int32 id = 1;
	//repeated LicensePackMessage licensePacks = 2;
	CustomerMessagePackBundleMessage customer = 3;
	float value = 4;
	bool isDeleted = 5;
}

message CustomerMessagePackBundleMessage {
	int32 id = 1;
	string companyName = 2;
	string taxId = 3;
	repeated string phones = 4;
	repeated string emails = 5;
	string notes = 6;
	repeated AddressMessage addresses = 7;
	//repeated PackBundleMessage packBundles = 8;
}

message TerminalMessage {
	int32 id = 1;
	string name = 2;
	string gestorVersion = 3;
}

message ChangeMainInstanceRequest {
	int32 databaseId = 1;
	protoMessages.Int32Message instanceId = 2;
}

message GenerateApiKeyRequest {
	string name = 1;
	repeated servicePermissions.RolePermissionMessage roles = 2;
}

message GenerateApiKeyForLicensesRequest {
	string name = 1;
	repeated int32 licenses = 2;
}

message GenerateApiKeyResponse {
	string apiKey = 1;
}

message ApiKeyMessage {
	string id = 1;
	protoMessages.StringMessage50 name = 2;
	repeated servicePermissions.RolePermissionMessage roles = 4;
	UserMessage creator = 5;
	google.protobuf.Timestamp creationDate = 6;
	bool active = 7;
	string cancellationNote = 8;
	google.protobuf.Timestamp cancellationDate = 9;
}

message ApiKeyLicenseMessage {
	string id = 1;
	protoMessages.StringMessage50 name = 2;
	UserMessage creator = 5;
	google.protobuf.Timestamp creationDate = 6;
	bool active = 7;
	string cancellationNote = 8;
	google.protobuf.Timestamp cancellationDate = 9;
	repeated int32 licenses = 10;
}


message UserPermissionsMessage {
	string userId = 1;
	repeated servicePermissions.RolePermissionMessage roles = 2;
}

message DatabaseUserMessage {
	string userId = 1;
	int32 databaseId = 2;
	repeated servicePermissions.RolePermissionMessage roles = 3;
}

message GetDatabaseUserRequest {
	string userId = 1;
	int32 databaseId = 2;
}

message DatabaseLicenseMessage {
	int32 databaseId = 1;
	string companyName = 2;
	string taxID = 3;
	bool hasUseLicense = 4;
	bool hasUpdateLicense = 5;
	bool hasCloudLicense = 6;
	int32 instanceCount = 7;
	int32 TerminalCount = 8;
	string gestorVersion = 9;
	string databaseName = 10;
}

message CancelApiKeyRequest {
	string id = 1;
	string note = 2;
}

message InstanceNameRequest {
	int32 instanceId = 1;
	string newName = 2;
}

message DatabaseCustomerMessage {
	string companyName = 1;
	int32 customerId = 2;
	string taxId = 3;
	int32 amountDatabases = 4;
	int32 useLicense = 5;
	int32 updateLicense = 6;
	int32 cloudLicense = 7;
	int32 dashboardLicense = 8;
}

message ServerMessage {
	int32 id = 1;
	string name = 2;
	int32 Number = 3;
	enum State{
		Active = 0;
		Maintenance = 1;
		Discharged = 2;
	}
	State state = 4;
	string Ip = 5;
	enum InternetProvider {
		 Personal = 0;
		 Duppini = 1;
	}
	InternetProvider internetProvider = 6;
	int32 port = 7;
	string externalAccess = 8;
	string mother = 9;
	string processor = 10;
	string memory = 11;
	protoMessages.StringMessage solidDisk = 12;
	protoMessages.StringMessage flatDisk = 13;
	protoMessages.StringMessage externalDisk = 14;
	protoMessages.StringMessage notes = 15;
}

message ServerResponse {
	protoMessages.ResponseResult result = 1;
	ServerMessage message = 2;
}

message CloudDatabaseMessage {
	int32 id = 1;
	int32 databaseId = 2;
	int32 serverDatabaseNumber = 3;
	int32 virtualServerId = 4;
	string databaseName = 5;
	string file = 6;
	string rightsGroup = 7;
	VirtualServerMessage virtualServer = 10;
	
	GrossIncomeWithholdingTypes GrossIncomeWithholding = 11;
	
	enum GrossIncomeWithholdingTypes {
		GrossIncomeWithholdingTypes_None = 0;
		GrossIncomeWithholdingTypes_NoWithholding = 1;
		GrossIncomeWithholdingTypes_ArbaGeneral = 2;
		GrossIncomeWithholdingTypes_ArbaEspecial = 4;
		GrossIncomeWithholdingTypes_Agip = 8;
	}
}

message CloudDatabaseResponse {
	protoMessages.ResponseResult result = 1;
	CloudDatabaseMessage message = 2;
}

message RdpUserMessage {
	int32 id = 1;
	int32 cloudDatabaseId = 2;
	string password = 3;
	string name = 4;
	string email = 5;
	string userId = 6;
	int32 order = 7;
	protoMessages.Int32Message linkedToId = 8;
	RdpUserMessage linkedTo = 9;
	repeated RdpUserMessage linkedFrom = 10;
}

message RdpUserResponse {
	protoMessages.ResponseResult result = 1;
	RdpUserMessage message = 2;
}

message AvailableCloudDatabasesMessageList {
	protoMessages.ResponseResult result = 1;
	repeated int32 values = 2;
}

message AvailableCloudDatabasesRequest {
	int32 virtualServerId = 1;
	int32 databaseId = 2;
}

message VirtualServerMessage {
	int32 id = 1;
	int32 serverId = 2;
	string name = 3;
	string serverPrefix = 4;
	int32 amountDatabases = 5;
	string databasePrefix = 6;
	string userPrefix = 7;
	enum State{
		StateOn = 0;
		StateOff = 1;
		StateDischarged = 2;
	}
	State state = 8;
	string ip = 9;
	int32 port = 10;
	string externalAccess = 11;
	string allocatedResources = 12;
	enum Os {
		WindowsServer2008 = 0; 
		WindowsServer2016 = 1;
		Windows10 = 2;
		Ubuntu2004 = 3;
		Ubuntu1804 = 4;
	}
	Os os = 13;
	enum SqlVersion {
		SqlVersionSql2012 = 0;
		SqlVersionSql2000 = 1;
	}
	SqlVersion sqlVersion = 14;
	protoMessages.StringMessage notes = 15;
	ServerMessage server = 16;
}

message VirtualServerResponse{
	protoMessages.ResponseResult result = 1;
	VirtualServerMessage message = 2;
}

message VirtualServerDatabaseMessage{
	int32 databaseId = 1;
	string databaseName = 2;
	string displayName = 3;
	string customerName = 4;
}