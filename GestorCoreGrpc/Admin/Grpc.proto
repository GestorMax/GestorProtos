syntax = "proto3";

import "google/protobuf/Empty.proto";
import "ProtoMessages/Common.proto";
import "GestorCoreGrpc/Admin/Messages.proto";
import "ServicePermissions/Messages.proto";

package gestorCoreGrpcAdmin;

service GestorCoreAdmin {
	//User
	rpc ListUsers (google.protobuf.Empty) returns (UserMessageList);

	rpc GetUser (protoMessages.StringMessage) returns (UserResponse);

	rpc AddUserRole (UserRoleRequest) returns (protoMessages.ResponseResult);
	
	rpc RemoveUserRole (UserRoleRequest) returns (protoMessages.ResponseResult);
	
	rpc ListUsersByDatabase(protoMessages.Int32Message) returns (UserMessageList);

	rpc GetDatabaseUser(GetDatabaseUserRequest) returns (DatabaseUserMessage);
	
	rpc AddDatabaseUser(DatabaseUserMessage) returns (protoMessages.ResponseResult);
	
	rpc EditDatabaseUser(DatabaseUserMessage) returns (protoMessages.ResponseResult);

	rpc ListUsersByRoleId(protoMessages.Int32Message) returns (UserMessageList);

	//Roles
	rpc ListRoles (google.protobuf.Empty) returns (servicePermissions.RoleMessageList);

	rpc GetRole (protoMessages.Int32Message) returns (servicePermissions.RoleResponse);

	rpc CreateRole (servicePermissions.RoleMessage) returns (protoMessages.ResponseResult);

	rpc EditRole (servicePermissions.RoleMessage) returns (protoMessages.ResponseResult);

	rpc RemoveRole (protoMessages.Int32Message) returns (protoMessages.ResponseResult);

	//Customers
	rpc ListCustomers (google.protobuf.Empty) returns (CustomerMessageList);

	rpc GetCustomer (protoMessages.Int32Message) returns (CustomerResponse);


	rpc UpdateCustomer(CustomerMessage) returns (protoMessages.ResponseResult);

	rpc CreateCustomer (CustomerMessage) returns (CustomerResponse);

	rpc AddCustomerVault(protoMessages.Int32Message) returns (VaultResponse);

	rpc CreatePackBundle (PackBundleMessage) returns (CreatePackBundleResponse);

	rpc RemovePackBundle (PackBundleMessage) returns (protoMessages.ResponseResult);
	
	//Vaults
	rpc GetVault(protoMessages.Int32Message) returns (VaultResponse);

	rpc EditVault(VaultMessage) returns (protoMessages.ResponseResult);

	//Databases
	rpc CreateDatabase (CreateDatabaseResquest) returns (DatabaseMessage);
	
	rpc GetDatabase(protoMessages.Int32Message) returns (DatabaseMessage);

	rpc ListDatabases (google.protobuf.Empty) returns (DatabaseResultMessageList);

	rpc ListUnlinkedDatabases (google.protobuf.Empty) returns (UnlinkedDatabaseMessageList);

	rpc EditDatabase(DatabaseMessage) returns (protoMessages.ResponseResult);
	
	rpc ListDatabaseInstances(google.protobuf.Empty) returns (DatabaseInstanceMessageList);

	rpc ChangeMainInstance(ChangeMainInstanceRequest) returns (protoMessages.ResponseResult);

	rpc ChangeInstanceName(InstanceNameRequest) returns (protoMessages.ResponseResult);
	
	rpc GetGestorDbToken (GetGestorDbTokenRequest) returns (GestorDbTokenResponse);

	rpc DeleteDatabaseWithOutLicenses (protoMessages.Int32Message) returns (protoMessages.ResponseResult);

	rpc AddDatabaseVault(protoMessages.Int32Message) returns (VaultResponse);
	
	//Licenses
	rpc DeleteLicense(LicenseRequest) returns (protoMessages.ResponseResult);

	rpc CancelLicense(LicenseMessage) returns (protoMessages.ResponseResult);

	rpc CreateLicense(LicenseMessage) returns (protoMessages.ResponseResult);
	
	rpc EditLicense(LicenseMessage) returns (protoMessages.ResponseResult);

	rpc CreateLicensePack(CreateLicensePackRequest) returns (CreateLicensePackResponse);

	rpc RemoveLicensePack(protoMessages.Int32Message) returns (protoMessages.ResponseResult);

	//LicenseTypes
	rpc ListLicenseTypeByModule(protoMessages.Int32Message) returns (LicenseTypeMessageList);

	rpc ListLicenseType (google.protobuf.Empty) returns (LicenseTypeMessageList);

	rpc GetLicenseType (protoMessages.Int32Message) returns (LicenseTypeResponse);

	rpc CreateLicenseType (LicenseTypeMessage) returns (protoMessages.ResponseResult);

	rpc EditLicenseType (LicenseTypeMessage) returns (protoMessages.ResponseResult);

	rpc RemoveLicenseType (protoMessages.Int32Message) returns (protoMessages.ResponseResult);

	//Servers

	rpc ListServers (google.protobuf.Empty) returns (ServerMessageList);

	rpc GetServer (protoMessages.Int32Message) returns (ServerResponse);

	rpc CreateServer (ServerMessage) returns (ServerResponse);

	rpc EditServer (ServerMessage) returns (ServerResponse);

	//RdpDatabase
	rpc GetRdpDatabaseByDatabase (protoMessages.Int32Message) returns (RdpDatabaseResponse);

	rpc CreateRdpDatabase (RdpDatabaseMessage) returns (RdpDatabaseResponse);

	rpc EditRdpDatabase (RdpDatabaseMessage) returns (RdpDatabaseResponse);

	rpc DeleteRdpDatabase (protoMessages.Int32Message) returns (protoMessages.ResponseResult);

	rpc ListAvailableRdpDatabasesByServerId (AvailableRdpDatabasesRequest) returns (AvailableRdpDatabasesMessageList);

	//RdpUsers
	rpc ListRdpUsersByRdpDatabase(protoMessages.Int32Message) returns (RdpUserMessageList);
	
	rpc GetRdpUser(protoMessages.Int32Message) returns (RdpUserResponse);

	rpc CreateRdpUser(RdpUserMessage) returns (RdpUserResponse);

	rpc EditRdpUser(RdpUserMessage) returns (RdpUserResponse);

	//apikey
	rpc GenerateApiKeyForDatabase (GenerateApiKeyRequest) returns (GenerateApiKeyResponse);
	rpc GenerateApiKeyForLicenses (GenerateApiKeyForLicensesRequest) returns (GenerateApiKeyResponse);

	rpc EditApiKeyForLicense(ApiKeyLicenseMessage) returns (protoMessages.ResponseResult);

	rpc ListApiKeyByDatabase(protoMessages.Int32Message) returns (ApiKeyMessageList);
	rpc ListApiKeyByLicensePack(protoMessages.Int32Message) returns (ApiKeyLicenseMessageList);

	rpc CancelApiKey (CancelApiKeyRequest) returns (protoMessages.ResponseResult);

	//reportes
	rpc ListDatabaseLicenses(google.protobuf.Empty) returns (DatabaseLicenseMessageList);
	rpc ListDatabaseCustomer(google.protobuf.Empty) returns (DatabaseCustomerMessageList);

	
	//VirtualServers

	rpc ListVirtualServers (google.protobuf.Empty) returns (VirtualServerMessageList);

	rpc GetVirtualServer (protoMessages.Int32Message) returns (VirtualServerResponse);

	rpc CreateVirtualServer (VirtualServerMessage) returns (VirtualServerResponse);

	rpc EditVirtualServer (VirtualServerMessage) returns (VirtualServerResponse);

	rpc ListDatabasesByVirtualServer (protoMessages.Int32Message) returns (VirtualServerDatabaseMessageList);

}
